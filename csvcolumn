#!/usr/bin/env python3

import argparse
import csv
from collections import defaultdict

def print_headers(filename: str, encoding: str):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')

        for row in reader:
            for col in row:
                print(col)
            exit(0)

def print_columns(filename: str, column_header: str, print_empty_lines: bool, encoding: str, all: bool=False):
    cnts = defaultdict(int)
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        col_index = 0
        
        for row in reader:
            if reader.line_num == 1:
                try:
                    col_index = row.index(column_header)
                    continue
                except ValueError:
                    print(f"Column header {column_header} not found in {filename}")
                    exit(1)
            
            val = row[col_index]

            if not all:
                cnts[val] +=1
            elif val or print_empty_lines:
                print(val)
    
    if not all:
        for column, cnt in cnts.items():
            print('{:>10} {}'.format(cnt, column))

        print('')
        print('{:>10} {}'.format('Total non-empty', sum([cnt for col, cnt in cnts.items() if col])))

def print_column_counts(filename: str, encoding: str):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        col_indices = {}
        col_cnts = defaultdict(int)
        total = 0
        
        for row in reader:
            if reader.line_num == 1:
                for idx, column in enumerate(row):
                    col_indices[column] = idx
                    
                continue

            for idx, value in enumerate(row):
                if value:
                    col_cnts[idx] += 1
            total += 1

        if total == 0:
            print("No rows found")
            exit()

        for column_name, column_idx in col_indices.items():
            print('{:<40} {:<10} {:f}'.format(column_name, col_cnts[column_idx], col_cnts[column_idx] / total))
        
        print('{:<40} {}'.format('Total', total))

def print_rows_empty(filename: str, column_header: str, encoding: str, max: int=100):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')

        col_index = 0
        cnt = 0

        for row in reader:
            if reader.line_num == 1:
                try:
                    col_index = row.index(column_header)
                    continue
                except ValueError:
                    print(f"Column header {column_header} not found in {filename}")
                    exit(1)
                print_row(row)

            if not row[col_index]:
                print_row(row)
                cnt += 1

                if cnt >= max:
                    exit()

def print_row(row: list, delimiter=';'):
    print(delimiter.join(row))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Print column and column info from CSV')
    parser.add_argument('csvfile', type=str, help='The CSV file')
    parser.add_argument('column', nargs='?', type=str, help='The header of the column to print. If omitted, all column names will be written to screen')
    parser.add_argument('--print-empty', dest='printempty', action='store_true', help='Print empty lines')
    parser.add_argument('--encoding', default='UTF-8', dest='encoding', help='The character encoding of the CSV, defaults to UTF-8 (ISO-8859-1, UTF-8, etc)')
    parser.add_argument('--all', default=False, help='Print all values, instead of only the unique values')
    parser.add_argument('--counts', action='store_true', default=False, help='Print numer of non-empty values per column')
    parser.add_argument('--empty-rows', dest='emptyrows', action='store_true', help='Print rows where column is empty')
    parser.add_argument('--max', default=100, help='Max rows to output')

    args = parser.parse_args()

    if not args.column:
        if args.counts:
            print_column_counts(args.csvfile, encoding=args.encoding)
        else:
            print_headers(args.csvfile, encoding=args.encoding)
    elif args.emptyrows:
        print_rows_empty(args.csvfile, args.column, encoding=args.encoding, max=args.max)
    else:
        print_columns(args.csvfile, args.column, args.printempty, encoding=args.encoding, all=args.all)
