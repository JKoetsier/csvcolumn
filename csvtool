#!/usr/bin/env python3

import argparse
import csv
from collections import defaultdict


def _get_csv_reader(file):
    return csv.reader(file, delimiter=';')


def _get_headers(file):
    reader = _get_csv_reader(file)

    row = next(reader)
    return list(row)


def _listdiff(l1: list, l2: list):
    """Returns a list of values that are in l1, but not in l2

    :param l1:
    :param l2:
    :return:
    """
    vals2 = dict((x, x) for x in l2)

    return [v for v in l1 if vals2.get(v) is None]


def print_values(values: list):
    for v in values:
        print(v)


def print_row(row: list, delimiter=';'):
    print(delimiter.join(row))



def action_print_headers(file):
    headers = _get_headers(file)

    for header in headers:
        print(header)


def value_counts_for_column(file, column_header: str):
    cnts = defaultdict(int)
    reader = _get_csv_reader(file)
    col_index = 0

    for row in reader:
        if reader.line_num == 1:
            try:
                col_index = row.index(column_header)
                continue
            except ValueError:
                print(f"Column header {column_header} not found in file")
                exit(1)

        val = row[col_index]
        cnts[val] += 1
    return cnts


def action_values(file, column_header: str, min: int=0, print_rows: bool = False):

    cnts = value_counts_for_column(file, column_header)
    total = sum(cnts.values())

    if print_rows:
        vals = list(set([k for k, v in cnts.items() if v >= min]))

        print_rows_where_column_equals(file, column_header, vals)

    else:
        for column in sorted(cnts.keys()):
            cnt = cnts[column]
            if cnt >= min:
                print('{:>10} ({:f}) {}'.format(cnt, cnt / total, column))

        print('')
        total_non_empty = sum([cnt for col, cnt in cnts.items() if col])
        print('{:>20} {} ({:f})'.format('Total non-empty', total_non_empty, total_non_empty / total))
        print('{:>20} {}'.format('Total', total))


def print_column_counts(file):
    reader = _get_csv_reader(file)
    col_indices = {}
    col_cnts = defaultdict(int)
    total = 0

    for row in reader:
        if reader.line_num == 1:
            for idx, column in enumerate(row):
                col_indices[column] = idx

            continue

        for idx, value in enumerate(row):
            if value:
                col_cnts[idx] += 1
        total += 1

    if total == 0:
        print("No rows found")
        exit()

    for column_name, column_idx in col_indices.items():
        print('{:<40} {:<10} {:f}'.format(column_name, col_cnts[column_idx], col_cnts[column_idx] / total))

    print('{:<40} {}'.format('Total', total))


def action_empty(file, column_header: str, max: int = 0, print_rows=False, rowid=None):
    if print_rows is False and rowid is None:
        raise Exception("Missing rows or rowid parameter")

    if print_rows:
        raise NotImplementedError

    f = File(file, rowid)

    for row_idx, row in f.rows.items():
        value = f.get_colvalue(row, column_header)

        if not value:
            print(f._get_index_for_row(row))



def get_values_for_column(file, column_header: str):
    reader = _get_csv_reader(file)
    col_index = 0

    for row in reader:
        if reader.line_num == 1:
            try:
                col_index = row.index(column_header)
            except ValueError:
                print(f"Column header {column_header} not found in file")
                exit(1)
            continue

        yield row[col_index]


def print_values_for_column(file, column_header: str):
    cnt = 0

    for value in get_values_for_column(file, column_header):
        if value:
            print(value)
            cnt += 1


def print_rows_where_column_equals(file, column_header: str, equals: list):
    rows = get_rows_where_column_equals(file, column_header, equals)

    for row in rows:
        print(row)


def get_rows_where_column_equals(file, column_header: str, equals: list):
    result = []
    reader = _get_csv_reader(file)
    col_index = 0

    # Make dict, much faster
    equalvals = dict((x, x) for x in equals)

    for row in reader:
        if reader.line_num == 1:
            try:
                col_index = row.index(column_header)
            except ValueError:
                print(f"Column header {column_header} not found in file")
                exit(1)

            continue

        if equalvals.get(row[col_index]) is not None:
            result.append(row)

    return result



def compare_files(file1, file2, column_header: str, print_rows: bool = False):
    values1 = list(get_values_for_column(file1, column_header))
    values2 = list(get_values_for_column(file2, column_header))

    missing2 = _listdiff(values1, values2)
    missing1 = _listdiff(values2, values1)

    if print_rows:
        print("")
        print(f"Missing in 1 ({len(missing1)} rows):")
        print_rows_where_column_equals(file2, column_header, missing1)

        print("")
        print(f"Missing in 2 ({len(missing2)} rows):")
        print_rows_where_column_equals(file1, column_header, missing2)
        print("")
    else:
        print(f"Missing in 1 ({len(missing1)} values):")
        print_values(missing1)
        print(f"Missing in 2 ({len(missing2)} values):")
        print_values(missing2)


def action_compare_files_cnts(file1, file2, column_header: str, direction: str):
    counts1 = value_counts_for_column(file1, column_header)
    counts2 = value_counts_for_column(file2, column_header)

    diffs = {}
    comparefunc = _get_compare_function(direction)

    for value, cnt1 in counts1.items():
        cnt2 = counts2.get(value, 0)

        if comparefunc(cnt1, cnt2):
            diffs[value] = (cnt1, cnt2)

        if cnt2 > 0:
            del counts2[value]

    # Remaining values
    if direction in ('=', '<'):
        for value, cnt2 in counts2.items():
            diffs[value] = (0, cnt2)

    def print_line(col1, col2, col3, col4):
        print("{:<60} {:>8} {:>8} {:>8}".format(col1, col2, col3, col4))

    # Only show totals
    print_line("Value", "File 1", "File 2", "Diff")

    for value, (cnt1, cnt2) in diffs.items():
        print_line(value, cnt1, cnt2, cnt2 - cnt1)


class File:

    def __init__(self, file, rowid=None):
        self.headers = _get_headers(file)
        self.rowid_original = rowid
        self.rowid = self._getrowid(rowid)
        self.file = file
        self.rows = self._read_rows(file)

    def _getrowid(self, rowid):
        if rowid is None:
            return None

        result = []
        for col_name in rowid:
            col_idx = self.headers.index(col_name)

            if col_idx is None:
                raise ValueError(f"Column {col_name} does not exist")

            result.append(col_idx)

        return result

    def _read_rows(self, file):
        if self.rowid:
            return self._read_rows_indexed(file)

        raise NotImplementedError

    def _get_index_for_row(self, row):
        return tuple([row[i] for i in self.rowid])

    def _read_rows_indexed(self, file):
        reader = _get_csv_reader(file)

        result = {}

        for row in reader:
            row_idx = self._get_index_for_row(row)
            assert result.get(row_idx) is None
            result[row_idx] = row

        return result

    def get_row(self, row_idx: tuple):
        return self.rows.get(row_idx)

    def get_colvalue(self, row, column_header):
        return row[self.headers.index(column_header)]


def _get_compare_function(direction: str):
    if direction == '=':
        comparefunc = lambda x, y: x != y
    elif direction == '<':
        comparefunc = lambda x, y: x < y
    elif direction == '>':
        comparefunc = lambda x, y: x > y
    else:
        raise Exception(f"Unknown direction: {direction}")

    return comparefunc


def action_compare_rows_on_value(file1, file2, column_header: str, rowid: list, direction: str):
    f1 = File(file1, rowid)
    f2 = File(file2, rowid)

    comparefunc = _get_compare_function(direction)

    for row_idx, row in f1.rows.items():
        val1 = f1.get_colvalue(row, column_header)

        row2 = f2.get_row(row_idx)

        if not row2:
            # Skip non-matching rows for now
            print("1", row)
            print("2", "row missing")
            continue

        val2 = f2.get_colvalue(row2, column_header)

        if comparefunc(val1, val2):
            print("1", row)
            print("2", row2)


if __name__ == "__main__":
    actions = ['column', 'empty', 'fillstats', 'headers', 'values', 'compare', 'counts']

    description = '''
CSV helper tool

Actions:
{file} column {column}                      prints all values for column
{file} empty {column}                       prints all rows or ids where column is empty
{file} fillstats                            prints the fill statistics for all columns (number of non-empty values)
{file} headers                              prints the headers of the file
{file} values {column}                      prints the distribution of values for column 
{file} compare {column} --file2 {file2}     prints the difference in values for column between files 1 and 2
{file} counts {column} --file2 {file2}      prints the difference in value counts for column between files 1 and 2

Examples:
- Show difference in values between file 1 and 2 for column
csvtool {file} compare {column} --encoding ISO-8859-1 --file2 {file2}

- Show difference in values between file 1 and 2 for column, but print the rows. Use columns A and B to uniquely identify row
csvtool {file} counts {column} --encoding ISO-8859-1 --file2 {file2} --rows --rowid A,B

- Show difference in values between file 1 and 2 for column, but only for where count is higher left than right
csvtool {file} counts {column} --encoding ISO-8859-1 --file2 {file2} --direction '>'

- Print distribution of values for column (only for values that occur more than n times)
csvtool {file} values {column} [--min n]

- Print all rows where column is empty
csvtool {file} empty {column} --rows

- Print all rowids where column is empty
csvtool {file} empty {column} --rowid A,B


'''
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('csvfile', type=str, help='The CSV file')
    parser.add_argument('action', type=str, choices=actions, help='The action to perform')
    parser.add_argument('column', nargs='?', type=str,
                        help='The header of the column to print. If omitted, all column names will be written to screen')
    parser.add_argument('--encoding', default='utf-8-sig', dest='encoding',
                        help='The character encoding of the CSV, defaults to UTF-8 (ISO-8859-1, UTF-8, etc)')
    parser.add_argument('--max', default=0, type=int, help='Max rows to output')
    parser.add_argument('--file2', dest='file2', help='Second file, for comparison')
    parser.add_argument('--encoding2', default='utf-8-sig', dest='encoding2',
                        help='The character encoding of the second CSV, defaults to UTF-8 (ISO-8859-1, UTF-8, etc)')
    parser.add_argument('--rows', action='store_true', help='Print rows instead of values')
    parser.add_argument('--min', default=1, type=int, help='Only show values that occur at least min times')
    parser.add_argument('--rowid', type=str, help='Use this column(s) to uniquely identify rows')
    parser.add_argument('--direction', type=str, help='Direction of differences to show, either <, > or =', default='=')

    args = parser.parse_args()

    if args.rowid:
        args.rowid = args.rowid.split(',')

    file1 = open(args.csvfile, 'r', encoding=args.encoding)

    if args.file2:
        file2 = open(args.file2, 'r', encoding=args.encoding2)
    else:
        file2 = None

    if args.action == 'headers':
        action_print_headers(file1)
    elif args.action == 'fillstats':
        print_column_counts(file1)
    elif args.action == 'empty':
        assert args.column
        action_empty(file1, args.column, max=args.max, print_rows=args.rows, rowid=args.rowid)
    elif args.action == 'column':
        assert args.column
        print_values_for_column(file1, args.column)
    elif args.action == 'values':
        assert args.column
        action_values(file1, args.column, min=args.min,
                      print_rows=args.rows)
    elif args.action == 'compare':
        assert args.file2
        assert args.column
        compare_files(file1, file2, args.column, print_rows=args.rows)
    elif args.action == 'counts':
        assert args.file2
        assert args.column

        if not args.rows:
            action_compare_files_cnts(file1, file2, args.column, direction=args.direction)
        else:
            assert args.rowid

            action_compare_rows_on_value(file1, file2, args.column, rowid=args.rowid, direction=args.direction)

    file1.close()

    if file2:
        file2.close()
