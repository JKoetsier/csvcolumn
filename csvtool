#!/usr/bin/env python3

import argparse
import csv
from collections import defaultdict


def print_headers(filename: str, encoding: str):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')

        for row in reader:
            for col in row:
                print(col)
            exit(0)


def value_counts_for_column(filename: str, column_header: str, encoding: str):
    cnts = defaultdict(int)

    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        col_index = 0

        for row in reader:
            if reader.line_num == 1:
                try:
                    col_index = row.index(column_header)
                    continue
                except ValueError:
                    print(f"Column header {column_header} not found in {filename}")
                    exit(1)

            val = row[col_index]
            cnts[val] += 1
    return cnts


def action_values(filename: str, column_header: str, encoding: str,
                  min: int=0, print_rows: bool = False):

    cnts = value_counts_for_column(filename, column_header, encoding)
    total = sum(cnts.values())

    if print_rows:
        vals = list(set([k for k, v in cnts.items() if v >= min]))

        print_rows_where_column_equals(filename, column_header, vals, encoding)

    else:
        for column in sorted(cnts.keys()):
            cnt = cnts[column]
            if cnt >= min:
                print('{:>10} ({:f}) {}'.format(cnt, cnt / total, column))

        print('')
        total_non_empty = sum([cnt for col, cnt in cnts.items() if col])
        print('{:>20} {} ({:f})'.format('Total non-empty', total_non_empty, total_non_empty / total))
        print('{:>20} {}'.format('Total', total))


def print_column_counts(filename: str, encoding: str):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        col_indices = {}
        col_cnts = defaultdict(int)
        total = 0

        for row in reader:
            if reader.line_num == 1:
                for idx, column in enumerate(row):
                    col_indices[column] = idx

                continue

            for idx, value in enumerate(row):
                if value:
                    col_cnts[idx] += 1
            total += 1

        if total == 0:
            print("No rows found")
            exit()

        for column_name, column_idx in col_indices.items():
            print('{:<40} {:<10} {:f}'.format(column_name, col_cnts[column_idx], col_cnts[column_idx] / total))

        print('{:<40} {}'.format('Total', total))


def print_rows_empty(filename: str, column_header: str, encoding: str, max: int = 100):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')

        col_index = 0
        cnt = 0

        for row in reader:
            if reader.line_num == 1:
                try:
                    col_index = row.index(column_header)
                except ValueError:
                    print(f"Column header {column_header} not found in {filename}")
                    exit(1)
                print_row(row)
                continue

            if not row[col_index]:
                print_row(row)
                cnt += 1

                if cnt >= max:
                    exit()


def get_values_for_column(filename: str, column_header: str, encoding: str):


    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        col_index = 0

        for row in reader:
            if reader.line_num == 1:
                try:
                    col_index = row.index(column_header)
                except ValueError:
                    print(f"Column header {column_header} not found in {filename}")
                    exit(1)
                continue

            yield row[col_index]


def print_values_for_column(filename: str, column_header: str, encoding: str):
    cnt = 0

    for value in get_values_for_column(filename, column_header, encoding):
        if value:
            print(value)
            cnt += 1


def print_rows_where_column_equals(filename: str, column_header: str, equals: list, encoding: str):
    with open(filename, 'r', encoding=encoding) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        col_index = 0

        # Make dict, much faster
        equalvals = dict((x, x) for x in equals)

        for row in reader:
            if reader.line_num == 1:
                try:
                    col_index = row.index(column_header)
                except ValueError:
                    print(f"Column header {column_header} not found in {filename}")
                    exit(1)

                print_row(row)
                continue

            if equalvals.get(row[col_index]) is not None:
                print_row(row)


def _listdiff(l1: list, l2: list):
    """Returns a list of values that are in l1, but not in l2

    :param l1:
    :param l2:
    :return:
    """
    vals2 = dict((x, x) for x in l2)

    return [v for v in l1 if vals2.get(v) is None]


def compare_files(filename1: str, filename2: str, column_header: str, encoding1: str, encoding2: str,
                  print_rows: bool = False):
    values1 = list(get_values_for_column(filename1, column_header, encoding1))
    values2 = list(get_values_for_column(filename2, column_header, encoding2))

    missing2 = _listdiff(values1, values2)
    missing1 = _listdiff(values2, values1)

    if print_rows:
        print("")
        print(f"Missing in 1 ({len(missing1)} rows):")
        print_rows_where_column_equals(filename2, column_header, missing1, encoding2)

        print("")
        print(f"Missing in 2 ({len(missing2)} rows):")
        print_rows_where_column_equals(filename1, column_header, missing2, encoding1)
        print("")
    else:
        print(f"Missing in 1 ({len(missing1)} values):")
        print_values(missing1)
        print(f"Missing in 2 ({len(missing2)} values):")
        print_values(missing2)


def action_compare_files_cnts(filename1: str, filename2: str, column_header: str, encoding1: str, encoding2: str):
    counts1 = value_counts_for_column(filename1, column_header, encoding1)
    counts2 = value_counts_for_column(filename2, column_header, encoding2)

    def print_line(col1, col2, col3):
        print("{:<60} {:>8} {:>8}".format(col1, col2, col3))

    print_line("Value", "File 1", "File 2")

    for value, cnt1 in counts1.items():
        cnt2 = counts2.get(value, 0)

        if cnt1 != cnt2:
            print_line(value, cnt1, cnt2)

        if cnt2 > 0:
            del counts2[value]

    # Remaining values
    for value, cnt2 in counts2.items():
        print_line(value, 0, cnt2)



def print_values(values: list):
    for v in values:
        print(v)


def print_row(row: list, delimiter=';'):
    print(delimiter.join(row))


if __name__ == "__main__":
    actions = ['column', 'emptyrows', 'fillstats', 'headers', 'values', 'compare', 'counts']

    description = '''
CSV helper tool

Actions:
{file} column {column}                      prints all values for column
{file} emptyrows {column}                   prints all rows where column is empty
{file} fillstats                            prints the fill statistics for all columns (number of non-empty values)
{file} headers                              prints the headers of the file
{file} values {column}                      prints the distribution of values for column 
{file} compare {column} --file2 {file2}     prints the difference in values for column between files 1 and 2
{file} counts {column} --file2 {file2}      prints the difference in value counts for column between files 1 and 2

Examples:
csvtool {file} compare {column} --encoding ISO-8859-1 --file2 {file2} [--rows]
csvtool {file} values {column} [--min n]
'''
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('csvfile', type=str, help='The CSV file')
    parser.add_argument('action', type=str, choices=actions, help='The action to perform')
    parser.add_argument('column', nargs='?', type=str,
                        help='The header of the column to print. If omitted, all column names will be written to screen')
    parser.add_argument('--encoding', default='utf-8-sig', dest='encoding',
                        help='The character encoding of the CSV, defaults to UTF-8 (ISO-8859-1, UTF-8, etc)')
    parser.add_argument('--max', default=100, type=int, help='Max rows to output')
    parser.add_argument('--file2', dest='file2', help='Second file, for comparison')
    parser.add_argument('--encoding2', default='utf-8-sig', dest='encoding2',
                        help='The character encoding of the second CSV, defaults to UTF-8 (ISO-8859-1, UTF-8, etc)')
    parser.add_argument('--rows', action='store_true', help='Print rows instead of values')
    parser.add_argument('--min', default=1, type=int, help='Only show values that occur at least min times')

    args = parser.parse_args()

    if args.action == 'headers':
        print_headers(args.csvfile, encoding=args.encoding)
    elif args.action == 'fillstats':
        print_column_counts(args.csvfile, encoding=args.encoding)
    elif args.action == 'emptyrows':
        assert args.column
        print_rows_empty(args.csvfile, args.column, encoding=args.encoding, max=args.max)
    elif args.action == 'column':
        assert args.column
        print_values_for_column(args.csvfile, args.column, encoding=args.encoding)
    elif args.action == 'values':
        assert args.column
        action_values(args.csvfile, args.column, encoding=args.encoding, min=args.min,
                      print_rows=args.rows)
    elif args.action == 'compare':
        assert args.file2
        assert args.column
        compare_files(args.csvfile, args.file2, args.column, encoding1=args.encoding, encoding2=args.encoding2,
                      print_rows=args.rows)
    elif args.action == 'counts':
        assert args.file2
        assert args.column
        action_compare_files_cnts(args.csvfile, args.file2, args.column, encoding1=args.encoding,
                                  encoding2=args.encoding2)

